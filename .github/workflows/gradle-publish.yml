name: Gradle Package

on:
  push:
    branches: [dev]

jobs:
  build:

    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:
      - uses: actions/checkout@v3
      - name: Run chmod to make gralew executable
        run: chmod +x ./gradlew

      - name: Create appliction-test.properties
        run: | 
          touch ./src/main/resources/application-test.properties
          echo "${{ secrets.APPLICATION_TEST }}" > ./src/main/resources/application-test.properties
          cat ./src/main/resources/application-test.properties

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          server-id: github # Value of the distributionManagement/repository/id field of the pom.xml
          settings-path: ${{ github.workspace }} # location for the settings.xml file
      - name: Restore dependencies
        run: ./gradlew dependencies
          
      - name: Start MySQL with Docker Compose
        run: docker-compose up -d

      - name: Start Redis
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: 6

      - name: Build with Gradle
        # uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
        # with:
        #   arguments: build
        run: |
         ./gradlew build -x test
          
      - name: Docker Push In DockerRepo
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      - name: Deploy to server
        uses: appleboy/ssh-action@v0.1.6
        id: deploy
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            docker-compose up -d
            docker image prune -f
